#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <string>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16

static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000 };


// 'xbox_PNG17528', 40x40px
const unsigned char epd_bitmap_xbox_PNG17528 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 
	0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x03, 0xc0, 
	0x00, 0x01, 0xc0, 0x07, 0xe0, 0x00, 0x07, 0xe0, 0x07, 0xf0, 0x00, 0x0f, 0xf0, 0x0f, 0xf8, 0x00, 
	0x1f, 0xf0, 0x1f, 0xfe, 0x00, 0x3f, 0xf8, 0x1f, 0xfc, 0x00, 0x3f, 0xf8, 0x3f, 0xfc, 0x00, 0x1f, 
	0xfc, 0x3f, 0xf8, 0x00, 0x0f, 0xfc, 0x3f, 0xf0, 0x00, 0x0f, 0xfe, 0x7f, 0xe0, 0x00, 0x07, 0xfe, 
	0x7f, 0xc0, 0x18, 0x03, 0xfe, 0x7f, 0xc0, 0x3c, 0x01, 0xfe, 0x7f, 0x80, 0x7f, 0x01, 0xfe, 0x7f, 
	0x80, 0xff, 0x80, 0xfe, 0x7f, 0x01, 0xff, 0xc0, 0x7e, 0x7e, 0x03, 0xff, 0xe0, 0x7e, 0x7e, 0x07, 
	0xff, 0xf0, 0x3e, 0x7c, 0x0f, 0xff, 0xf8, 0x3e, 0x3c, 0x1f, 0xff, 0xf8, 0x1e, 0x38, 0x3f, 0xff, 
	0xfc, 0x1e, 0x38, 0x7f, 0xff, 0xfe, 0x0c, 0x18, 0x7f, 0xff, 0xff, 0x0c, 0x10, 0xff, 0xff, 0xff, 
	0x88, 0x01, 0xff, 0xff, 0xff, 0x88, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0xc0, 
	0x01, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 
	0x3f, 0xff, 0xfe, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'xbox_PNG17528', 16x16px
const unsigned char epd_bitmap_xbox_PNG17528_small [] PROGMEM = {
	0x01, 0x80, 0x03, 0xe0, 0x00, 0x00, 0x38, 0x1c, 0x7c, 0x3e, 0x78, 0x1e, 0x70, 0x0f, 0xf1, 0x87, 
	0xe7, 0xe7, 0x47, 0xe3, 0x4f, 0xfa, 0x5f, 0xfa, 0x1f, 0xfc, 0x1f, 0xf8, 0x07, 0xe0, 0x00, 0x00
};

// 'CAT-modified', 124x64px
const unsigned char epd_bitmap_CAT_modified [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x9b, 0x7f, 0xff, 0xff, 0xb0, 
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xcd, 0xff, 0xb7, 0xf2, 0x60, 
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x66, 0xff, 0xf6, 0x99, 0x10, 
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0xef, 0xfb, 0xed, 0x90, 
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80, 0x9b, 0xff, 0xff, 0x6e, 0xe0, 
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0xb7, 0xfd, 0xdb, 0x60, 
	0x08, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x40, 0x67, 0xef, 0xff, 0xdb, 0x10, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x37, 0x7b, 0xee, 0x6d, 0xd0, 
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x4f, 0xde, 0xff, 0xe6, 0xc0, 
	0x01, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x40, 0x4e, 0xff, 0xbf, 0xbb, 0x30, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x7f, 0xf9, 0xfb, 0xfb, 0x60, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x02, 0x07, 0x00, 0x0f, 0xff, 0x7e, 0x7c, 0xcc, 0xd0, 
	0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x7f, 0xf7, 0xff, 0xed, 0xf6, 0xb0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x07, 0xc3, 0xdd, 0xfd, 0xbd, 0xbb, 0x76, 0x20, 
	0x02, 0x00, 0x04, 0x00, 0x00, 0x06, 0x00, 0x04, 0x03, 0x3e, 0x18, 0xcf, 0xff, 0xbb, 0x9b, 0xc0, 
	0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x03, 0x7d, 0xb2, 0xfe, 0xfe, 0xee, 0xe9, 0xb0, 
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x01, 0xf3, 0x2c, 0x7b, 0xef, 0xbf, 0xdb, 0x90, 
	0x08, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x32, 0x01, 0xff, 0x67, 0x2f, 0x3f, 0xff, 0x98, 0xd0, 
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe2, 0x01, 0xc3, 0x5f, 0xbd, 0xfe, 0xfe, 0xf7, 0xf0, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0xc4, 0x03, 0x81, 0xbe, 0xdb, 0xdb, 0xf7, 0xf6, 0xd0, 
	0x00, 0x00, 0x40, 0x00, 0x80, 0x00, 0x05, 0x84, 0x03, 0x81, 0xb4, 0x9f, 0xf7, 0x7f, 0x16, 0xf0, 
	0x01, 0x00, 0x40, 0x05, 0x00, 0x00, 0x1d, 0x0c, 0x07, 0x03, 0xf5, 0x6f, 0xfd, 0xed, 0xcf, 0xf0, 
	0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x74, 0x0c, 0x07, 0x03, 0xe9, 0x0f, 0xfd, 0xfe, 0x7f, 0xf0, 
	0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x78, 0x1c, 0x06, 0x5b, 0xee, 0x9f, 0xcf, 0xfb, 0xdf, 0xe0, 
	0x04, 0x00, 0x80, 0x02, 0x00, 0x04, 0x18, 0x1c, 0x0e, 0x7b, 0x32, 0x1f, 0xfa, 0x6f, 0xfe, 0xf0, 
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x3c, 0x08, 0x1b, 0x7e, 0x12, 0x47, 0x6f, 0xbd, 0xbf, 0xb0, 
	0x00, 0x01, 0x00, 0x06, 0x04, 0x00, 0x74, 0x28, 0x1d, 0xde, 0x18, 0x2f, 0x4d, 0x9f, 0xfb, 0xf0, 
	0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x08, 0x1d, 0xbe, 0x20, 0x8f, 0xfd, 0x7b, 0x5f, 0xc0, 
	0x00, 0x00, 0x80, 0x00, 0x10, 0x00, 0x9e, 0x10, 0x1a, 0xb9, 0x0c, 0x43, 0x36, 0x6c, 0xf6, 0xf0, 
	0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x0f, 0x04, 0x1a, 0xde, 0x10, 0x33, 0xff, 0xb6, 0x0f, 0xb0, 
	0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x07, 0x00, 0x1e, 0x15, 0x36, 0x07, 0xbb, 0xb7, 0x8d, 0xa0, 
	0x00, 0x02, 0x00, 0x04, 0x40, 0x01, 0x17, 0x10, 0x0e, 0x71, 0x65, 0x93, 0xfa, 0xf9, 0xbd, 0xb0, 
	0x00, 0x02, 0x00, 0x03, 0x00, 0x02, 0x17, 0x00, 0x0e, 0x0f, 0xe9, 0x0e, 0x7f, 0x2b, 0x34, 0xf0, 
	0x00, 0x02, 0x00, 0x01, 0x90, 0x02, 0x07, 0x08, 0x06, 0x83, 0xaa, 0x43, 0xf7, 0x37, 0xe5, 0xd0, 
	0x00, 0x02, 0x00, 0x02, 0x20, 0x02, 0x77, 0x00, 0x07, 0x03, 0xa9, 0x33, 0xf6, 0xf7, 0xb8, 0x70, 
	0x02, 0x22, 0x00, 0x02, 0x00, 0x02, 0xdf, 0x00, 0x07, 0x01, 0x7d, 0x06, 0xfe, 0xfc, 0xd8, 0x70, 
	0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xfe, 0x00, 0x07, 0x03, 0x74, 0xcb, 0xe9, 0xba, 0xdc, 0xe0, 
	0x00, 0x02, 0x00, 0x01, 0x20, 0x02, 0xfc, 0x00, 0x03, 0x82, 0x9e, 0x2b, 0xed, 0xeb, 0x71, 0xf0, 
	0x00, 0x02, 0x00, 0x02, 0x40, 0x02, 0x1f, 0x00, 0x07, 0xe6, 0x23, 0x07, 0xb7, 0x6f, 0xf1, 0xb0, 
	0x00, 0x02, 0x00, 0x00, 0x40, 0x06, 0x1f, 0x00, 0x05, 0xfc, 0x65, 0xc6, 0xd9, 0xff, 0xec, 0xf0, 
	0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0x07, 0x00, 0x0f, 0x76, 0x04, 0xab, 0xdf, 0xb7, 0xa5, 0xd0, 
	0x00, 0x02, 0x80, 0x00, 0x00, 0x06, 0x27, 0x00, 0x1c, 0xd2, 0x90, 0x8b, 0xdf, 0xfc, 0xf1, 0xf0, 
	0x00, 0x02, 0x00, 0x01, 0x80, 0x06, 0x2f, 0x00, 0x74, 0x0c, 0x90, 0x96, 0xce, 0x7b, 0x7b, 0xd0, 
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x0f, 0x00, 0xf3, 0x03, 0x0c, 0xb3, 0xb7, 0xeb, 0x6f, 0xd0, 
	0x01, 0x02, 0x80, 0x01, 0x00, 0x04, 0xd7, 0x00, 0xc8, 0x00, 0xc6, 0x4d, 0xfd, 0xe9, 0xa5, 0x90, 
	0x00, 0x02, 0x00, 0x01, 0x80, 0x10, 0xff, 0x00, 0x00, 0x00, 0x12, 0x7c, 0xcf, 0xde, 0xf9, 0x70, 
	0x00, 0x03, 0x00, 0x01, 0x00, 0x11, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x03, 0x7e, 0xd3, 0xde, 0x40, 
	0x00, 0x02, 0x00, 0x01, 0x00, 0x61, 0xfe, 0x40, 0x00, 0x00, 0x00, 0x19, 0x7f, 0xaf, 0xff, 0xd0, 
	0x00, 0x02, 0x80, 0x00, 0x80, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7d, 0xbd, 0xbf, 0xd0, 
	0x00, 0x02, 0x80, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x12, 0x8f, 0xd7, 0xfe, 0xf0, 
	0x20, 0x03, 0x00, 0x01, 0x02, 0x80, 0x00, 0x40, 0x00, 0x00, 0x04, 0x1a, 0xaf, 0xdf, 0x7f, 0xb0, 
	0x00, 0x03, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x27, 0xff, 0xfb, 0xd0, 
	0x10, 0x02, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x53, 0xfb, 0xfe, 0xd0, 
	0x00, 0x03, 0x80, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0xd9, 0xbf, 0xf6, 0xe0, 
	0x08, 0x01, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x29, 0xa6, 0xbf, 0xfd, 0x30, 
	0x00, 0x01, 0x00, 0x00, 0x32, 0x40, 0x00, 0x00, 0x00, 0x00, 0x08, 0x34, 0xe6, 0xdf, 0xdb, 0x90, 
	0x04, 0x01, 0x80, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x01, 0xa8, 0x56, 0xdb, 0x9f, 0xdb, 0xf0, 
	0x00, 0x01, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x12, 0x06, 0x4b, 0x3b, 0x33, 0xef, 0x60, 
	0x00, 0x01, 0x40, 0x00, 0x77, 0xc0, 0x00, 0x01, 0x6c, 0x52, 0xd1, 0x2b, 0xa7, 0xfd, 0xbf, 0xf0, 
	0x00, 0x01, 0x40, 0x00, 0x95, 0xe0, 0x00, 0x1c, 0x00, 0x00, 0x09, 0x3c, 0xdc, 0x9c, 0xf6, 0xf0, 
	0x00, 0x01, 0x40, 0x00, 0x99, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x67, 0xa7, 0xff, 0xf0, 
	0x00, 0x01, 0x80, 0x00, 0x08, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0xb6, 0xfb, 0xff, 0xf0, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

  // 'Porsche-Logo-500x281', 128x64px
const unsigned char epd_bitmap_Porsche_Logo_500x281 [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x4c, 0xc9, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xdb, 0xeb, 0x7e, 0xdf, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0xb0, 0xab, 0x66, 0xfa, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x3c, 0xad, 0xaf, 0x9a, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xf7, 0xec, 0xa1, 0x9a, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x07, 0xff, 0xff, 0xfa, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xfe, 0xff, 0x7e, 0xfe, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xfa, 0x26, 0x00, 0xdf, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x2f, 0xfe, 0x00, 0x03, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd9, 0xfd, 0xdb, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0xcc, 0xee, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xdb, 0x3d, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x93, 0x4d, 0xff, 0xff, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x2d, 0xce, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xed, 0xbb, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x7e, 0xfd, 0x12, 0x48, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0xd3, 0xd6, 0x40, 0x02, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xed, 0x96, 0x7b, 0x09, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x37, 0xef, 0xed, 0x99, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xb5, 0x61, 0xbd, 0xff, 0x04, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x1f, 0x76, 0x53, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xc9, 0xed, 0xdf, 0xdd, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x6f, 0xfb, 0xff, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x93, 0xfc, 0x7b, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0xb6, 0xf0, 0x6f, 0xfb, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x65, 0xa3, 0xf0, 0x33, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x0b, 0xdc, 0x73, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd1, 0xfd, 0xf8, 0x63, 0x84, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x37, 0x40, 0xd3, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0xcb, 0xb0, 0x13, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfb, 0xa4, 0x0f, 0x99, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xdf, 0x0e, 0xcc, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0xdf, 0x0e, 0xe6, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0xdb, 0x8f, 0x3b, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xe5, 0xcd, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xec, 0x6e, 0x59, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xbf, 0xdb, 0x32, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0xbc, 0xb7, 0x99, 0x02, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x1c, 0xec, 0xcc, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x07, 0xa2, 0xf5, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x93, 0x37, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0xdd, 0x64, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x21, 0x01, 0x66, 0x4e, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0xcc, 0xad, 0x32, 0x11, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xd0, 0x93, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xc4, 0xe4, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x8f, 0x36, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xe3, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x39, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0xcc, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb2, 0x66, 0xc8, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x21, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0xa6, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xca, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x4b, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

  
void testdrawline() {
  int16_t i;

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for(i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000); // Pause for 2 seconds
}

void testdrawrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testfillrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=3) {
    // The INVERSE color is used so rectangles alternate white/black
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawtriangle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfilltriangle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for(int16_t i=0; i<256; i++) {
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);
}

void testdrawstyles(void) {
  display.clearDisplay();

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("Hello, world!"));

  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
  display.println(3.141592);

  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);

  display.display();
  delay(2000);
}

void testscrolltext(void) {
  display.clearDisplay();

  display.setTextSize(2); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println(F("scroll"));
  display.display();      // Show initial text
  delay(100);

  // Scroll in various directions, pausing in-between:
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
  delay(1000);
}

void testdrawbitmap(void) {
  display.clearDisplay();

  display.drawBitmap(
    (display.width()  - LOGO_WIDTH ) / 2,
    (display.height() - LOGO_HEIGHT) / 2,
    logo_bmp, LOGO_WIDTH, LOGO_HEIGHT, 1);
  display.display();
  delay(1000);
}

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

void testanimate(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  int8_t f, icons[NUMFLAKES][3];

  // Initialize 'snowflake' positions
  for(f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
    icons[f][YPOS]   = -LOGO_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
    Serial.print(F("x: "));
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(F(" y: "));
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(F(" dy: "));
    Serial.println(icons[f][DELTAY], DEC);
  }

  for(;;) { // Loop forever...
    display.clearDisplay(); // Clear the display buffer

    // Draw each snowflake:
    for(f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap, w, h, SSD1306_WHITE);
    }

    display.display(); // Show the display buffer on the screen
    delay(200);        // Pause for 1/10 second

    // Then update coordinates of each flake...
    for(f=0; f< NUMFLAKES; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
      // If snowflake is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height()) {
        // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - LOGO_WIDTH, display.width());
        icons[f][YPOS]   = -LOGO_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  }
}

void drawXBOX(void) {
  display.clearDisplay();

  display.setTextSize(2);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("XBOX"));

  display.display();
}

void drawXBOXValues(int throttleValue, int steeringAngle ) {
  display.clearDisplay();

  int throttle = map(throttleValue, 1000, 2000, -100, 100);
  String throttleString = String(throttle);
  String steeringString = String(steeringAngle); 
  
  throttleString = "Throttle: " + throttleString + " %";
  steeringString = "Steering: " + steeringString + " deg";

  display.drawBitmap(0,0, epd_bitmap_xbox_PNG17528_small, 16, 16, WHITE);

  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(20,0); 
  display.println(F("XBOX"));

  display.setTextSize(1.8);             // Normal 1:1 pixel scale
  display.setCursor(0,25); 
  display.println(throttleString);
  display.println(steeringString); 

  display.display();
}

void drawXBOXPitLimit(int throttleValue, int steeringAngle, int throttleLimit ) {
  display.clearDisplay();

  int throttle = map(throttleValue, 1000, 2000, -100, 100);
  int throttleGear = map(throttleLimit, 1600, 2000,1, 5);
 
  String throttleString = String(throttle);
  String steeringString = String(steeringAngle);

  if (throttleGear == 0){
    String throttleGearString = "N";
  } else if (throttleGear == -1){
    String throttleGearStrin = "R";
  }else {
    String throttleGearString = String(throttleGear);
  }
  
  throttleString = "Throttle: " + throttleString + " %";
  steeringString = "Steering: " + steeringString + " deg";
  String throttleGearString = "Gear: " + throttleGearString;

  display.drawBitmap(0,0, epd_bitmap_xbox_PNG17528_small, 16, 16, WHITE);

  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(20,0); 
  display.println(F("XBOX"));

  display.setTextSize(1);
  display.print("Pit Limit");

  display.setTextSize(1.8);             // Normal 1:1 pixel scale
  display.setCursor(0,25); 
  display.println(steeringString);
  display.println(throttleString);
  display.println(throttleGearString);

  display.display();
}

void drawCANValues(int throttleValue, int steeringAngle ) {
  display.clearDisplay();

  int throttle = map(throttleValue, 1000, 2000, -100, 100);
  String throttleString = String(throttle);
  String steeringString = String(steeringAngle); 
  
  throttleString = "Throttle: " + throttleString + " %";
  steeringString = "Steering: " + steeringString + " deg";

  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0); 
  display.println(F("CAN"));

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setCursor(0,25); 
  display.println(throttleString);
  display.println(steeringString); 

  display.display();
}

void drawPorscheLogo(){
  display.clearDisplay();
  display.drawBitmap(0,0, epd_bitmap_Porsche_Logo_500x281, 128, 64, WHITE);
  display.display();
}

void drawXBOXsearching() {
  display.clearDisplay();

  display.drawBitmap(0,20, epd_bitmap_xbox_PNG17528, 40, 40, WHITE);

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(48,32);
  display.println(F("looking for"));
  display.setCursor(48,42); 
  display.println(F("Controller... "));

  display.display();
}

void drawCat(){
  display.clearDisplay();
  display.drawBitmap(0,0, epd_bitmap_CAT_modified, 128, 64, WHITE);
  display.display();
}